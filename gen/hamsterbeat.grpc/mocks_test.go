// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package hamsterbeat_grpc

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHamsterbeatClient creates a new instance of MockHamsterbeatClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHamsterbeatClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHamsterbeatClient {
	mock := &MockHamsterbeatClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHamsterbeatClient is an autogenerated mock type for the HamsterbeatClient type
type MockHamsterbeatClient struct {
	mock.Mock
}

type MockHamsterbeatClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHamsterbeatClient) EXPECT() *MockHamsterbeatClient_Expecter {
	return &MockHamsterbeatClient_Expecter{mock: &_m.Mock}
}

// Pulse provides a mock function for the type MockHamsterbeatClient
func (_mock *MockHamsterbeatClient) Pulse(ctx context.Context, in *HamsterbeatRequest, opts ...grpc.CallOption) (*HamsterbeatResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Pulse")
	}

	var r0 *HamsterbeatResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *HamsterbeatRequest, ...grpc.CallOption) (*HamsterbeatResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *HamsterbeatRequest, ...grpc.CallOption) *HamsterbeatResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HamsterbeatResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *HamsterbeatRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHamsterbeatClient_Pulse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pulse'
type MockHamsterbeatClient_Pulse_Call struct {
	*mock.Call
}

// Pulse is a helper method to define mock.On call
//   - ctx context.Context
//   - in *HamsterbeatRequest
//   - opts ...grpc.CallOption
func (_e *MockHamsterbeatClient_Expecter) Pulse(ctx interface{}, in interface{}, opts ...interface{}) *MockHamsterbeatClient_Pulse_Call {
	return &MockHamsterbeatClient_Pulse_Call{Call: _e.mock.On("Pulse",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHamsterbeatClient_Pulse_Call) Run(run func(ctx context.Context, in *HamsterbeatRequest, opts ...grpc.CallOption)) *MockHamsterbeatClient_Pulse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*HamsterbeatRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockHamsterbeatClient_Pulse_Call) Return(hamsterbeatResponse *HamsterbeatResponse, err error) *MockHamsterbeatClient_Pulse_Call {
	_c.Call.Return(hamsterbeatResponse, err)
	return _c
}

func (_c *MockHamsterbeatClient_Pulse_Call) RunAndReturn(run func(ctx context.Context, in *HamsterbeatRequest, opts ...grpc.CallOption) (*HamsterbeatResponse, error)) *MockHamsterbeatClient_Pulse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHamsterbeatServer creates a new instance of MockHamsterbeatServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHamsterbeatServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHamsterbeatServer {
	mock := &MockHamsterbeatServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHamsterbeatServer is an autogenerated mock type for the HamsterbeatServer type
type MockHamsterbeatServer struct {
	mock.Mock
}

type MockHamsterbeatServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHamsterbeatServer) EXPECT() *MockHamsterbeatServer_Expecter {
	return &MockHamsterbeatServer_Expecter{mock: &_m.Mock}
}

// Pulse provides a mock function for the type MockHamsterbeatServer
func (_mock *MockHamsterbeatServer) Pulse(context1 context.Context, hamsterbeatRequest *HamsterbeatRequest) (*HamsterbeatResponse, error) {
	ret := _mock.Called(context1, hamsterbeatRequest)

	if len(ret) == 0 {
		panic("no return value specified for Pulse")
	}

	var r0 *HamsterbeatResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *HamsterbeatRequest) (*HamsterbeatResponse, error)); ok {
		return returnFunc(context1, hamsterbeatRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *HamsterbeatRequest) *HamsterbeatResponse); ok {
		r0 = returnFunc(context1, hamsterbeatRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HamsterbeatResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *HamsterbeatRequest) error); ok {
		r1 = returnFunc(context1, hamsterbeatRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHamsterbeatServer_Pulse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pulse'
type MockHamsterbeatServer_Pulse_Call struct {
	*mock.Call
}

// Pulse is a helper method to define mock.On call
//   - context1 context.Context
//   - hamsterbeatRequest *HamsterbeatRequest
func (_e *MockHamsterbeatServer_Expecter) Pulse(context1 interface{}, hamsterbeatRequest interface{}) *MockHamsterbeatServer_Pulse_Call {
	return &MockHamsterbeatServer_Pulse_Call{Call: _e.mock.On("Pulse", context1, hamsterbeatRequest)}
}

func (_c *MockHamsterbeatServer_Pulse_Call) Run(run func(context1 context.Context, hamsterbeatRequest *HamsterbeatRequest)) *MockHamsterbeatServer_Pulse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*HamsterbeatRequest))
	})
	return _c
}

func (_c *MockHamsterbeatServer_Pulse_Call) Return(hamsterbeatResponse *HamsterbeatResponse, err error) *MockHamsterbeatServer_Pulse_Call {
	_c.Call.Return(hamsterbeatResponse, err)
	return _c
}

func (_c *MockHamsterbeatServer_Pulse_Call) RunAndReturn(run func(context1 context.Context, hamsterbeatRequest *HamsterbeatRequest) (*HamsterbeatResponse, error)) *MockHamsterbeatServer_Pulse_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedHamsterbeatServer provides a mock function for the type MockHamsterbeatServer
func (_mock *MockHamsterbeatServer) mustEmbedUnimplementedHamsterbeatServer() {
	_mock.Called()
	return
}

// MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedHamsterbeatServer'
type MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedHamsterbeatServer is a helper method to define mock.On call
func (_e *MockHamsterbeatServer_Expecter) mustEmbedUnimplementedHamsterbeatServer() *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	return &MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call{Call: _e.mock.On("mustEmbedUnimplementedHamsterbeatServer")}
}

func (_c *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) Run(run func()) *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) Return() *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) RunAndReturn(run func()) *MockHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Run(run)
	return _c
}

// NewMockUnsafeHamsterbeatServer creates a new instance of MockUnsafeHamsterbeatServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsafeHamsterbeatServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsafeHamsterbeatServer {
	mock := &MockUnsafeHamsterbeatServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnsafeHamsterbeatServer is an autogenerated mock type for the UnsafeHamsterbeatServer type
type MockUnsafeHamsterbeatServer struct {
	mock.Mock
}

type MockUnsafeHamsterbeatServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsafeHamsterbeatServer) EXPECT() *MockUnsafeHamsterbeatServer_Expecter {
	return &MockUnsafeHamsterbeatServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedHamsterbeatServer provides a mock function for the type MockUnsafeHamsterbeatServer
func (_mock *MockUnsafeHamsterbeatServer) mustEmbedUnimplementedHamsterbeatServer() {
	_mock.Called()
	return
}

// MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedHamsterbeatServer'
type MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedHamsterbeatServer is a helper method to define mock.On call
func (_e *MockUnsafeHamsterbeatServer_Expecter) mustEmbedUnimplementedHamsterbeatServer() *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	return &MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call{Call: _e.mock.On("mustEmbedUnimplementedHamsterbeatServer")}
}

func (_c *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) Run(run func()) *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) Return() *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call) RunAndReturn(run func()) *MockUnsafeHamsterbeatServer_mustEmbedUnimplementedHamsterbeatServer_Call {
	_c.Run(run)
	return _c
}
