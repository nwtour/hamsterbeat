// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package hamsterbeat

import (
	"net"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockGrpcListener creates a new instance of MockGrpcListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGrpcListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGrpcListener {
	mock := &MockGrpcListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGrpcListener is an autogenerated mock type for the GrpcListener type
type MockGrpcListener struct {
	mock.Mock
}

type MockGrpcListener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGrpcListener) EXPECT() *MockGrpcListener_Expecter {
	return &MockGrpcListener_Expecter{mock: &_m.Mock}
}

// GetRPCListner provides a mock function for the type MockGrpcListener
func (_mock *MockGrpcListener) GetRPCListner() *grpc.Server {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRPCListner")
	}

	var r0 *grpc.Server
	if returnFunc, ok := ret.Get(0).(func() *grpc.Server); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Server)
		}
	}
	return r0
}

// MockGrpcListener_GetRPCListner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRPCListner'
type MockGrpcListener_GetRPCListner_Call struct {
	*mock.Call
}

// GetRPCListner is a helper method to define mock.On call
func (_e *MockGrpcListener_Expecter) GetRPCListner() *MockGrpcListener_GetRPCListner_Call {
	return &MockGrpcListener_GetRPCListner_Call{Call: _e.mock.On("GetRPCListner")}
}

func (_c *MockGrpcListener_GetRPCListner_Call) Run(run func()) *MockGrpcListener_GetRPCListner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpcListener_GetRPCListner_Call) Return(server *grpc.Server) *MockGrpcListener_GetRPCListner_Call {
	_c.Call.Return(server)
	return _c
}

func (_c *MockGrpcListener_GetRPCListner_Call) RunAndReturn(run func() *grpc.Server) *MockGrpcListener_GetRPCListner_Call {
	_c.Call.Return(run)
	return _c
}

// GetTCPListner provides a mock function for the type MockGrpcListener
func (_mock *MockGrpcListener) GetTCPListner() net.Listener {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTCPListner")
	}

	var r0 net.Listener
	if returnFunc, ok := ret.Get(0).(func() net.Listener); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}
	return r0
}

// MockGrpcListener_GetTCPListner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTCPListner'
type MockGrpcListener_GetTCPListner_Call struct {
	*mock.Call
}

// GetTCPListner is a helper method to define mock.On call
func (_e *MockGrpcListener_Expecter) GetTCPListner() *MockGrpcListener_GetTCPListner_Call {
	return &MockGrpcListener_GetTCPListner_Call{Call: _e.mock.On("GetTCPListner")}
}

func (_c *MockGrpcListener_GetTCPListner_Call) Run(run func()) *MockGrpcListener_GetTCPListner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpcListener_GetTCPListner_Call) Return(listener net.Listener) *MockGrpcListener_GetTCPListner_Call {
	_c.Call.Return(listener)
	return _c
}

func (_c *MockGrpcListener_GetTCPListner_Call) RunAndReturn(run func() net.Listener) *MockGrpcListener_GetTCPListner_Call {
	_c.Call.Return(run)
	return _c
}
